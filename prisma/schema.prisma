
// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(ATTENDEE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  festivals     Festival[] @relation("FestivalOrganizer")
}

enum UserRole {
  ADMIN
  ORGANIZER
  ARTIST
  ATTENDEE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Festival {
  id          String   @id @default(cuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  venue       String
  category    String
  imageUrl    String?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  organizerId String
  organizer   User     @relation("FestivalOrganizer", fields: [organizerId], references: [id])
  tickets     Ticket[]
  features    String[]
}

model Ticket {
  id           String   @id @default(cuid())
  type         String
  description  String
  price        Float
  quantity     Int
  soldCount    Int      @default(0)
  purchaseDate DateTime @default(now())
  festivalId   String
  userId       String
  status       String   @default("valid")
  festival     Festival @relation(fields: [festivalId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}
